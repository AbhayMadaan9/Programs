#include<bits/stdc++.h>
//https://www.codingninjas.com/codestudio/problems/right-view_764605?leftPanelTab=1
/*************************************************************
 
    Following is the Binary Tree node structure:

    template <typename T>

    class BinaryTreeNode 
    {
    public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;
        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/
//Idea is here we start traversing from the right subtree and continue and on traversing we compare the size of ans(vector data structure to store our ans) and the level of node if same then push_back if not then continue traversing

void solve(BinaryTreeNode<int>* root, int level, vector<int>& ans)
{
    if(root == NULL) return;
    if(ans.size() == level) ans.push_back(root->data);
    solve(root->right, level+1, ans);
    solve(root->left, level+1, ans);
}

vector<int> printRightView(BinaryTreeNode<int>* root) {
    vector<int> ans;
    solve(root, 0, ans);
    return ans;
}