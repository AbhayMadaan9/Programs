#include <bits/stdc++.h> 
//https://www.codingninjas.com/codestudio/problems/pair-sum-in-bst_920493?leftPanelTab=1
/**********************************************************

    Following is the Binary Tree Node structure:

    template <typename T>
    class BinaryTreeNode {
        public: 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };
***********************************************************/
void inorder_traversal(BinaryTreeNode<int> *root, vector<int> &ans)
{
    if(root == NULL) return ;
    inorder_traversal(root->left, ans);
    ans.push_back(root->data);
    inorder_traversal(root->right, ans);
}
bool brute_force2(BinaryTreeNode<int> *root, int k)
{
    vector<int>inorder;
    inorder_traversal(root, inorder);
    int s = 0, e = inorder.size()-1;
    while(e > s)
    {
        if(inorder[s] + inorder[e] == k) return true;
        else if(inorder[s] + inorder[e] > k) e -= 1;
        else s += 1;
    }
    return false;
}
bool search(BinaryTreeNode<int> *root, int key)
{
    if(!root) return false;
    if(root->data == key) return true;
    if(root->data > key) search(root->left, key);
    else search(root->right, key);
}
bool solve_brute_force1(BinaryTreeNode<int> *root, int k)
{
    if(!root) return false;
    while(root)
    {
        int cur = root->data;
        BinaryTreeNode<int> *temp = root;
        if(search(temp, k-cur)) {return true; break;}
        else
        {
            if(k-cur < cur) root = root->left;
            else root = root->right;
        }
        
    }
    return false;
}
bool pairSumBst(BinaryTreeNode<int> *root, int k)
{
return brute_force2(root, k);
}