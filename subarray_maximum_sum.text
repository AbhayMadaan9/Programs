// https://www.codingninjas.com/codestudio/problems/maximum-subarray_893296
//we can solve this problem in O(N^3) or O(N^2) using nested for loops
// one loop 0 to n-1 here taking sum = 0
// second loop from i+1 to n-i here summing and comparing with older sum(maxi) and storing in maxi variable(initialized with first element of array) i.e. maxi = max(sum(current_sum), maxi(older maximum sum stored))

//we will optimize the code to O(N) time complexity using Kadane's algorithm as described/used below 
//In kadane's main concept is that on concecutive addition sum should be greater than or equal to 0 or max to the previous sum made so far
//we maitain the indeces
//https://www.codingninjas.com/codestudio/problems/maximum-subarray_893296?leftPanelTab=1
vector<int> maximumsumSubarray(vector<int> &arr , int n)
{
    vector<int> ans;
    int sum = 0;
    int maxi = 0;
    int start =0, end = 0, s=0;
    for(int i = 0; i < n; i++)
    {
        sum += arr[i];
        if(sum > maxi) 
        {
            maxi = sum;
            start = s;
            end = i;
        }
        else if(sum < 0)
        {
            sum = 0;
            s = i+1;
        }
        else if(sum < maxi)
        {
            //do nothing
        }
    }
    for(int i =start; i <= end; i++)
    {
        ans.push_back(arr[i]);
    }
    
    return ans;
    
}
