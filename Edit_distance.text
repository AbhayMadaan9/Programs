
//https://practice.geeksforgeeks.org/problems/edit-distance3702/1
// This problem is solved using memoization
int solve(string str1, string str2, int i, int j, vector<vector<int>>& dp)
{
        int ans = 0;
    // if str1 > str2 means j has reached to the end of string of str2 but i still reading the str1
    if( j == str2.length())  return str1.length() - i; //These are the number of left characters to be inserted in str1 which will be added in total number of operations made
    else if(i == str1.length()) return str2.length() - j;
    
    if(dp[i][j] != -1) return dp[i][j];
    else if(str1[i] == str2[j]) return solve(str1, str2, i+1, j+1, dp);//if the current element of the string is same then both just move forward
    else{ //rest 3 operations is appiled on the character
        //we have to check the no. of operation which can be done we don't have to do it and make them equal
    //we will do operations on str1
        //Insert
         int insert_op = 1+ solve(str1, str2, i, j+1, dp);//adding 1 means we have done 1 operation
        //Delete
        int delete_op  = 1+ solve(str1, str2, i+1, j, dp);
        //replace
        int replace_op = 1+ solve(str1, str2, i+1, j+1, dp);
    
         ans = min(insert_op, min(delete_op, replace_op));  
    }
        return dp[i][j] = ans;
    
}
    int editDistance(string s, string t) 
    {  
    int size1 = s.length();
    int size2 = t.length();
    vector<vector<int>>dp(size1, vector<int>(size2, -1));
    return solve(s, t, 0, 0, dp);
        
    }
