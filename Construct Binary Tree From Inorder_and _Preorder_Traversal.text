#include <bits/stdc++.h> 
/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
//https://www.codingninjas.com/codestudio/problems/construct-a-binary-tree-from-preorder-and-inorder-traversal_920539
//description on copy
// postorder function check changes..(DIY) 
TreeNode<int>* generate(vector<int>& postOrder, int pstart, int pend, vector<int>& inOrder, int istart, int iend, map<int, int>ump)
{
    if(pstart > pend or istart > iend) return NULL; //its like the further no element so NULL
    
    TreeNode<int>*root = new TreeNode<int>(postOrder[pstart]);
    int root_idx = ump[root->data];
    
    int inorder_left_size = root_idx - istart;
    
    root->left = generate(postOrder, pstart+1 , pstart+inorder_left_size, inOrder, istart, root_idx-1, ump);
    root->right = generate(postOrder, pstart + inorder_left_size + 1, pend, inOrder, root_idx+1, iend, ump);
  
    
    return root;
}

TreeNode<int> *buildBinaryTree(vector<int> &inorder, vector<int> &preorder)
{
	    //hash map for inOrder vector
    map<int, int>ump; //value, index
    for(int i = 0; i < inorder.size(); i++)
    {
        ump[inorder[i]] = i;
    }
    
    return generate(preorder, 0, preorder.size()-1,  inorder, 0, inorder.size()-1, ump);
}