#include<bits/stdc++.h>
//https://www.codingninjas.com/codestudio/problems/time-to-burn-tree_630563
/************************************************************

    Following is the Binary Tree node structure

    class BinaryTreeNode 
    {
        public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) 
        {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
//Time taken to burn the whole tree means steps taken to traverse the whole nodes of tree.here time tken to burn the furhthest node is considered.
//Here for a node we have to check its parent, left, right. so BFS traversal of graph is done. It requires list of nodes with its parent node so first we create that using level order traversal then we do BFS travseral in which we use queue and visited map.and we have variable time which increments according to the set of nodes we enter to the queue while doing BFS traversal


BinaryTreeNode<int>* get_parents_searchNode(BinaryTreeNode<int>* root, unordered_map<BinaryTreeNode<int>*, BinaryTreeNode<int>*>& node_parent, int start)
{
    queue<BinaryTreeNode<int>*>q;
    q.push(root);
    BinaryTreeNode<int>* root2;
    while(!q.empty())
    {
        BinaryTreeNode<int>*node = q.front();
        if(node->data == start)  {root2 = node;}
        q.pop();
        if(node->left)
        {
            q.push(node->left);
            node_parent[node->left] = node;
        }
        if(node->right)
        {
            q.push(node->right);
            node_parent[node->right] = node;
        }
    }
    return root2;
}
int BFS(BinaryTreeNode<int>*root, unordered_map<BinaryTreeNode<int>*, BinaryTreeNode<int>*>node_parent)
{
    int time = 0;
    unordered_map<BinaryTreeNode<int>*, bool>burned; //this is visited array of bfs traversal
    queue<BinaryTreeNode<int>*>q;
    q.push(root);
    burned[root] = true;   //this don't take any time because are initially at root.

    while(!q.empty())
    {   
        bool flag = false; //to know wheather we have burned any node or not
        int size = q.size();
        for(int i = 0; i < size; i++)      //taken for loop because we want to take the set of nodes at particular level at one time/iteration because time  taken to burn the set of nodes at that level will be same. so to go in one flow we have taken loop to extract all the nodes at a time.
        {
            BinaryTreeNode<int>*node = q.front();
            q.pop();
            //check three connections of node
            if(node->left and !burned[node->left])
            {
                flag = true;
                burned[node->left] = true;
                q.push(node->left);
            }
            else if(node->right and !burned[node->right])
            {
                flag = true;
                burned[node->right] = true;
                q.push(node->right);
            }
            else if(node_parent[node] and !burned[node_parent[node]])
            {
                flag = true;
                burned[node_parent[node]] = true;
                q.push(node_parent[node]);
            }
            
        }
       if(flag) time ++;
    }
    return time;
}
int timeToBurnTree(BinaryTreeNode<int>* root, int start)
{
    if(!root) return 0;
    unordered_map<BinaryTreeNode<int>*, BinaryTreeNode<int>*>node_parent;
    BinaryTreeNode<int>*given_node;
    given_node = get_parents_searchNode(root, node_parent, start);
    int time = BFS(given_node, node_parent);
    return time;
}


//Corrected Code



int findMaxDistance(map<BinaryTreeNode<int>*, BinaryTreeNode<int>*> &mpp, BinaryTreeNode<int>* target) {
    queue<BinaryTreeNode<int>*> q; 
    q.push(target); 
    map<BinaryTreeNode<int>*,int> vis; 
    vis[target] = 1;
    int maxi = 0; 
    while(!q.empty()) {
        int sz = q.size();
        int fl = 0; 
        for(int i = 0;i<sz;i++) {
            auto node = q.front();
            q.pop();
            if(node->left && !vis[node->left]) {
                fl = 1; 
                vis[node->left] = 1; 
                q.push(node->left); 
            }
            if(node->right && !vis[node->right]) {
                fl = 1; 
                vis[node->right] = 1; 
                q.push(node->right); 
            }
            
            if(mpp[node] && !vis[mpp[node]]) {
                fl = 1; 
                vis[mpp[node]] = 1; 
                q.push(mpp[node]); 
            } 
        }
        if(fl) maxi++; 
    }
    return maxi; 
}
BinaryTreeNode<int>* bfsToMapParents(BinaryTreeNode<int>* root, 
                                     map<BinaryTreeNode<int>*, BinaryTreeNode<int>*> &mpp, int start) {
    queue<BinaryTreeNode<int>*> q; 
    q.push(root); 
    BinaryTreeNode<int>* res; 
    while(!q.empty()) {
        BinaryTreeNode<int>* node = q.front(); 
        if(node->data == start) res = node; 
        q.pop(); 
        if(node->left) {
            mpp[node->left] = node; 
            q.push(node->left); 
        }
        if(node->right) {
            mpp[node->right] = node;
            q.push(node->right); 
        }
    }
    return res; 
}
int timeToBurnTree(BinaryTreeNode<int>* root, int start)
{
    map<BinaryTreeNode<int>*, BinaryTreeNode<int>*> mpp; 
    BinaryTreeNode<int>* target = bfsToMapParents(root, mpp, start); 
    int maxi = findMaxDistance(mpp, target); 
    return maxi; 
}
