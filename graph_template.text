//change representation
vector<int> adj[n+1];
for(int i = 0; i < edges.size(); i++)
{
 int u = edges[i].first;
 int v = edges[i].second;
 adj[u].push_back(v);  
 adj[v].push_back(u);  
}

//declarations + initiazation
queue<int>q;
vector<int>parent(n+1, -1);
vector<bool>visited(n+1, false);
q.push(s);

//forming parent vector while doing bfs
while(!q.empty())
{
    int node = q.front();
    q.pop();
    visited[node] = true;
    
    for(auto i: adj[node])
    {
         if(!visited[i])
         {
             parent[i] = node;
             q.push(i);
             visited[i] = true;
         }
    }
}