//logic: roughCopy
//https://www.codingninjas.com/codestudio/problems/dijkstra-s-shortest-path_920469?leftPanelTab=1
#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
       //change representation
    vector<pair<int, int>> adj[vertices]; //node, distance
    for(int i = 0; i < vec.size(); i++)
    {
     int u = vec[i][0];
     int v = vec[i][1];
     int weight = vec[i][2];
     adj[u].push_back({v, weight});  
     adj[v].push_back({u, weight});  
    }
    
    //declarations + initiazation
    priority_queue<pair<int, int>,vector<pair<int, int>>,greater<pair<int, int>>> q; //distance from src, node
    vector<int>distances(vertices, INT_MAX);
    distances[source] = 0; 
    vector<bool>visited(vertices, false);
    q.push({0, source}); //starting from src  nodereturn distances[destination];
    

    while(!q.empty())
    {
        auto node = q.top();
        q.pop();
      //  visited[node.second] = true;
        
        for(auto i: adj[node.second])
        {
       
                 if(node.first+ i.second < distances[i.first])
                 {
                     distances[i.first] = node.first+ i.second;
                     q.push({distances[i.first] , i.first});
                 }
             
        }
    }
 

    return distances;
    
}
