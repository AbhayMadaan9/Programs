#include<bits/stdc++.h>
/************************************************************
   
   Following is the TreeNode class structure
   
   class TreeNode<T>
   { 
   public:
        T data; 
        TreeNode<T> *left;
        TreeNode<T> *right;
   
        TreeNode(T data) 
  		{ 
            this -> data = data; 
            left = NULL; 
            right = NULL; 
        }
   };
   
   
 ************************************************************/
//https://www.codingninjas.com/codestudio/problems/construct-binary-tree-from-inorder-and-postorder-traversal_1266106?leftPanelTab=1
//description on copy

TreeNode<int>* generate(vector<int>& postOrder, int pstart, int pend, vector<int>& inOrder, int istart, int iend, map<int, int>ump)
{
    if(pstart > pend or istart > iend) return NULL; //its like the further no element so NULL
    
    TreeNode<int>*root = new TreeNode<int>(postOrder[pend]);
    int root_idx = ump[root->data];
    
    int inorder_right_size = iend-root_idx;
    
    root->right = generate(postOrder, pend-inorder_right_size , pend - 1 , inOrder, root_idx+1, iend, ump);
    root->left = generate(postOrder, pstart, pend-inorder_right_size-1, inOrder, istart, root_idx-1, ump);
    
    return root;
}
TreeNode<int>* getTreeFromPostorderAndInorder(vector<int>& postOrder, vector<int>& inOrder) 
{
    //hash map for inOrder vector
    map<int, int>ump; //value, index
    for(int i = 0; i < inOrder.size(); i++)
    {
        ump[inOrder[i]] = i;
    }
    
    return generate(postOrder, 0, postOrder.size()-1,  inOrder, 0, inOrder.size()-1, ump);
}
