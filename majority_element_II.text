//https://www.codingninjas.com/codestudio/problems/majority-element-ii_893027?leftPanelTab=1
//optimal approch of this problem is solved using extended version of boyer moore algorithm(no. of majority elements  == no. of minority elements). THere can be atmost two majority elements that can occur n/3 times
#include <bits/stdc++.h> 
vector<int> majorityElementII(vector<int> &arr)
{
    int n = arr.size();
    int cnt1 = 0, cnt2 = 0;
    int num1 = -1, num2 = -1;
    for(int i = 0; i < arr.size(); i++)
    {
        if(arr[i] == num1) cnt1++; 
        else if(arr[i] == num2) cnt2++;
        else if(cnt1 == 0) {num1 = arr[i]; cnt1  = 1;}
        else if(cnt2 == 0) {num2 = arr[i]; cnt2  = 1;}
        else
        {
            cnt1--;
            cnt2--;
        }
    }
    //check for cnt of num
    cnt1 = 0;
    cnt2 = 0;
    for(int i = 0; i < arr.size(); i++)
    {
        if(arr[i] == num1) cnt1++;
        if(arr[i] == num2) cnt2++;
    }
    vector<int>ans;
    if(cnt1 > floor(n/3)) ans.push_back(num1);
    if(cnt2 > floor(n/3)) ans.push_back(num2);

    return ans;
}