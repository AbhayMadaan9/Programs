#include <bits/stdc++.h> 
//https://www.codingninjas.com/codestudio/problems/h_920474?leftPanelTab=1
/*************************************************************
    
    Following is the Binary Tree node structure:

    class TreeNode{

        public :
            int data;
            TreeNode *left;
            TreeNode *right;

            TreeNode(int data) {
                this -> data = data;
                left = NULL;
                right = NULL;
            }

            ~TreeNode() {
            if (left){
            delete left;
            }

            if (right){
            delete right;
            }
        }   
    };

*************************************************************/
//Approch-get inorder traversal of both the tree and merge two sorted array and contruct bst from inorder traversal
    void inorder_traversal(TreeNode<int> *root, vector<int>& ans)
{
    if(root == NULL) return ;
    inorder_traversal(root->left, ans);
    ans.push_back(root->data);
    inorder_traversal(root->right, ans);
}
TreeNode<int> * construct_BT(vector<int>& inorder, int s, int e)
{
    if(s > e) return NULL; 
    int mid = (s+e)/2;
    TreeNode<int> *root = new TreeNode<int>(inorder[mid]);
    root->left = construct_BT(inorder, s, mid-1);
    root->right =  construct_BT(inorder, mid+1, e);
    return root;
}
vector<int> merge(vector<int>& arr1, vector<int>& arr2, int m, int n)
{ 
    int i = 0, j = 0;
    vector<int> temp;
    int index = 0;
    while(i < m and j < n)
    {
        if(arr1[i] > arr2[j]) {temp.push_back(arr2[j]); j++; }
        else {temp.push_back(arr1[i]); i++; }
    }
    while(i < m)
    {
        temp.push_back(arr1[i]);
        
        i++;
    }
    while(j < n)
    {
        temp.push_back(arr2[j]);
        
        j++;
    }
    return temp;
    
}

TreeNode<int> *mergeBST(TreeNode<int> *root1, TreeNode<int> *root2){
    vector<int>inor1;
    vector<int>inor2;
    inorder_traversal(root1, inor1);
    inorder_traversal(root2, inor2);
    vector<int>merged_inor;
    merged_inor = merge(inor1, inor2, inor1.size(), inor2.size());
    return construct_BT(merged_inor, 0, merged_inor.size()-1);
}